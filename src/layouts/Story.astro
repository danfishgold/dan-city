---
import { Picture } from "astro:assets";
import { marked } from "marked";
import { type Story as Props } from "../stories";

const {
  title,
  description,
  items,
  aspectRatio: passedAspectRatio,
} = Astro.props;
const firstImage = items.find((story) => story.type === "image");
const fallbackAspectRatio = firstImage
  ? firstImage.src.width / firstImage.src.height
  : 1;
const aspectRatio = passedAspectRatio ?? fallbackAspectRatio;

const introMarkdown = `
# ${title}

${description}

## רגע רגע רגע מה קורה פה

זה סטורי, כמו באינסטגרם, אבל לא. תעדכנו אם אתם מוצאים באגים
`;

const introAndItems: Props["items"] = [
  { type: "markdown", text: introMarkdown },
  ...items,
];
---

<html>
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <div class="story-wrapper">
    <div class="story-scroller" tabindex="0">
      {
        introAndItems.map((story, index) => (
          <div id={`story-${index + 1}`} class="story">
            {story.type === "image" ? (
              <>
                <Picture
                  src={story.src}
                  alt={story.alt ?? ""}
                  widths={[400, 800, 1200]}
                  loading="lazy"
                />
                {story.translation && (
                  <div class="translation">{story.translation}</div>
                )}
              </>
            ) : (
              <div class="markdown-container">
                <div class="markdown" set:html={marked.parse(story.text)} />
              </div>
            )}
          </div>
        ))
      }
    </div>
    <!-- <div class="comments-etc">
      <button class="emoji-reaction-button">☺︎</button>
      <button class="comment-button">✍︎</button>
    </div> -->
  </div>

  <script>
    const container = document.querySelector(".story-scroller")! as HTMLElement;
    const storyElements = document.querySelectorAll(
      ".story"
    ) as NodeListOf<HTMLElement>;

    const observer = new IntersectionObserver(
      (entries) => {
        const intersectingStories = entries
          .filter((entry) => entry.isIntersecting)
          .map((entry) => (entry.target as HTMLElement).dataset);
        if (intersectingStories.length === 0) {
          return;
        } else if (intersectingStories.length > 1) {
          throw new Error(
            `Multiple stories found in intersection: ${intersectingStories.join(", ")}`
          );
        }
        // const activeStory = intersectingStories[0]!;
        // const activeStoryIndex = +activeStory.storyIndex!;
        // window.history.replaceState(
        //   undefined,
        //   "",
        //   `#story-${activeStoryIndex + 1}`
        // );
      },
      {
        root: container,
        rootMargin: "0px",
        threshold: 0.5,
      }
    );
    storyElements.forEach((story) => observer.observe(story));
  </script>
  <style define:vars={{ aspectRatio }}>
    html,
    body {
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
        Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
    }
    body {
      background-color: black;
      color: white;
      color-scheme: dark;
    }
    .story-wrapper {
      display: flex;
      flex-direction: column;
      padding: 16px 0;
      height: calc(100svh - 2 * 16px);
      align-items: center;

      .story-scroller {
        aspect-ratio: var(--aspectRatio);
        border-radius: 12px;
        flex-grow: 1;
        display: flex;
        flex-direction: row;
        gap: 12px;
        overflow-x: scroll;
        scrollbar-color: white black;
        scroll-snap-type: x mandatory;
        outline: none;

        &::-webkit-scrollbar {
          width: 5px;
          height: 8px;
          background-color: transparent;
        }

        &::-webkit-scrollbar-thumb {
          background: white;
          border-radius: 1000px;
        }

        .story {
          scroll-snap-align: center;
          flex-grow: 0;
          flex-shrink: 0;
          height: 100%;
          aspect-ratio: var(--aspectRatio);
          overflow-y: scroll; /* for text */
          border-radius: 12px; /* for text */

          img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            display: block;
            border-radius: 12px;
          }

          .markdown-container {
            --vertical-padding: 36px;
            padding: var(--vertical-padding) 24px;
            min-height: calc(100% - 2 * var(--vertical-padding));
            direction: rtl;
            display: grid;
            background-image: radial-gradient(
                circle at 94% 95%,
                hsla(170, 88%, 68%, 1) 3%,
                transparent 76%
              ),
              radial-gradient(
                circle at 89% 34%,
                hsla(263, 96%, 51%, 1) 1%,
                transparent 86%
              ),
              radial-gradient(
                circle at 86% 50%,
                hsla(318, 80%, 65%, 1) 7%,
                transparent 76%
              ),
              radial-gradient(
                circle at 89% 79%,
                hsla(248, 76%, 53%, 1) 7%,
                transparent 87%
              ),
              radial-gradient(
                circle at 15% 44%,
                hsla(4, 74%, 80%, 1) 15%,
                transparent 81%
              ),
              radial-gradient(
                circle at 99% 20%,
                hsla(75, 88%, 92%, 1) 1%,
                transparent 68%
              );

            .markdown {
              place-self: center;
            }
          }
        }
      }

      .comments-etc {
        button {
          background: none;
          margin: 0;
          padding: 0;
          border: none;
          color: white;
          font-size: 2.5rem;
          border-radius: 1000px;
        }
      }
    }

    @support not (margin-trim: block) {
      .markdown > :first-child {
        margin-block-start: 0;
      }
      .markdown > :last-child {
        margin-block-end: 0;
      }
    }
  </style>


</html>
